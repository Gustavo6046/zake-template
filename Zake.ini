# General project configuration.
[General]

    # Your project's name
    Name = my-project

    # Your project's version
    Version = 0.1.0  

    # The build targets of your project. Debug and Release are fine
    Targets = dbg rel

    # The partitions of your project. Each build target will build
    # one of each partition below.
    #
    # Partitions are helpful, because they allow distributing changes
    # separately; changes in the code will not require updating a
    # possibly quite large list of sprites, sounds, and other whathaveya,
    # from the net.

    #Partitions = asset code


# Partition configuration.
[Partition]

    # What kind of files should be in the Code partition.
    #
    # "DECORATE" includes the DECORATE generated from
    # ZDCode lumps.
    #
    # Do note that more "matchers" can be defined for
    # other partitions (Matchers.my_targert)
    Matchers.Code = *.o DECORATE DECORATE*

    # What files should be excluded from every partition.
    #
    # Use the dot syntax (akin to Matchers.Code above)
    # to specify a partition.
    Excluders = .gitignore

    # Excludes patterns only for the Asset partition.
    #
    # Note that this is not restricted to the debug build
    # (in a Partition.dbg section), as there is already an
    # Injects entry for it.
    Excluders.Asset = DEBUG

# Important project file locations.
[Paths]

    # The path of the output Asset partition package.
    Output.Asset = pkg/${name}-${version}-${target}-asset.pk3

    # Same as above, but for the Code partition.
    Output.Code = pkg/${name}-${version}-${target}-code.pk3

    # Where to walk for inputs to be included.
    #
    # More inputs can be added separated by spaces.
    # Also see Matchers and Excluders in [Partition] above.
    Inputs = content


# Sections of configuration can be defined for specific
# targets. For instance below, Paths.dbg.
[Paths.dbg]

    # Inputs to be inserted in specific locations.
    # In this case, it places the "contents/DEBUG"
    # file tree within the root of the package.
    #
    # Other use cases include adding ACS objects
    # in "bin/${target}/" into "acs/", to differentiate
    # between debug and release ACS modules.
    #
    # Note that injected inputs do not need to be
    # listed by an Inputs entry.
    Injects = "content/DEBUG":"."


# Preprocessor definitions, used in ZDCode.
[Definitions]

    TARGET = ${target}
    VERSION = ${version}


# Preprocessor definitions. In this case, for the debug build.
[Definitions.dbg]

    # No need to specify a value for the DEBUG definition.
    # Empty definitions are allowed, and "#ifdef" will merely
    # check for a definition's existence, even if it is, in
    # fact, empty.
    DEBUG =
